<%# 

	This is a plush template
	see https://github.com/gobuffalo/plush

%><%

let comment = fn(s) {
	if (s == "") {
		return ""
	} else {
		return "// " + s
	}
}

let serverName = fn(serviceName) {
	return serviceName + "Server"
}

%>// This file was autogenerated
// by remoto
// DO NOT EDIT

package <%= def.PackageName %>

import (
	"github.com/gorilla/rpc"
)
<%= for (service) in def.Services { %>
type <%= service.Name %> interface {
	<%= for (method) in service.Methods { %><%= comment(method.Comment) %>
	<%= method.Name %>(context.Context, *<%= method.RequestType %>) (*<%= method.ResponseType %>, error)
<% } %>
}

<%= for (service) in def.Services { %>
func New<%= serverName(service.Name) %>(service <%= service.Name %>) *<%= serverName(service.Name) %> {
	srv := &<%= serverName(service.Name) %>{
		rpc: rpc.NewServer(),
	}
	srv.rpc.RegisterCodec(json.NewCodec(), "application/json")
	s.RegisterService(srv, "")
	<%= for (method) in service.Methods { %>
	srv.router.Handle("/rpc/<%= service.Name %>/<%= method.Name %>")
	<% } %>
	return srv
}

type <%= serverName(service.Name) %> struct {
	rpc *rpc.Server
}

<%= for (method) in service.Methods { %><%= comment(method.Comment) %>
func (s *<%= serverName(service.Name) %>) <%= method.Name %>
<% } %>

<% } %>

<% } %>
