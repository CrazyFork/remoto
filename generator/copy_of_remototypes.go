package generator

// remotoTypesSrc is a copy of remototypes/remototypes.go
var remotoTypesSrc = "package remototypes\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"io\"\n)\n\n// File describes a binary file.\n// File is only allowed in requests.\ntype File struct {\n\tFieldname string `json:\"fieldname\"`\n\tFilename  string `json:\"filename\"`\n}\n\n// Open opens the file as an io.ReadCloser.\n// Callers must close the file.\nfunc (f File) Open(ctx context.Context) (io.ReadCloser, error) {\n\topener, ok := ctx.Value(contextKeyFileOpener).(Opener)\n\tif !ok {\n\t\treturn nil, errors.New(\"opener missing from context\")\n\t}\n\treturn opener(ctx, f)\n}\n\n// FileResponse is response type for a file.\ntype FileResponse struct {\n\tFilename      string    `json:\"filename\"`\n\tContentType   string    `json:\"contentType\"`\n\tContentLength int       `json:\"contentLength\"`\n\tData          io.Reader `json:\"-\"`\n\tError         string    `json:\"error\"`\n}\n\n// Opener is a function that knows how to open files.\ntype Opener func(ctx context.Context, file File) (io.ReadCloser, error)\n\n// WithOpener gets a new context.Context with the specified Opener.\nfunc WithOpener(ctx context.Context, opener Opener) context.Context {\n\treturn context.WithValue(ctx, contextKeyFileOpener, opener)\n}\n\n// contextKey is a local context key type.\n// see https://medium.com/@matryer/context-keys-in-go-5312346a868d\ntype contextKey string\n\nfunc (c contextKey) String() string {\n\treturn \"remototypes context key: \" + string(c)\n}\n\n// contextKeyFileOpener is the context key for a function capable of\n// opening files.\nvar contextKeyFileOpener = contextKey(\"files\")\n"
