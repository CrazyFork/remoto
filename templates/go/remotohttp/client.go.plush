<%# 

	This is a plush template
	see https://github.com/gobuffalo/plush

%><%

let comment = fn(s) {
	return "// "+s
}

let serverName = fn(serviceName) {
	return serviceName + "Server"
}

let typeString = fn(type) {
	if (type.IsMultiple) {
		return "[]" + type.Name
	}
	return type.Name
}

%>// Code generated by Remoto; DO NOT EDIT.

package <%= def.PackageName %>
<%= for (service) in def.Services { %>
// <%= service.Name %>Client accesses remote <%= service.Name %> services.
type <%= service.Name %>Client struct {
    // endpoint is the HTTP endpoint of the remote server.
    endpoint string
    // httpclient is the http.Client to use to make requests.
    httpclient *http.Client
}

// New<%= service.Name %>Client makes a new <%= service.Name %>Client that will
// use the specified http.Client to make requests.
func New<%= service.Name %>Client(endpoint string, client *http.Client) *<%= service.Name %>Client {
    return &<%= service.Name %>Client{
        endpoint: endpoint,
        httpclient: client,
    }
}

<%= for (method) in service.Methods { %><%= comment(method.Comment) %>
func (c *<%= service.Name %>Client) <%= method.Name %>Multi(ctx context.Context, requests ...*<%= method.RequestType.Name %>) (*<%= method.ResponseType.Name %>, error) {
	b, err := json.Marshal(requests)
    if err != nil {
        return nil, errors.Wrap(err, "encode request")
    }

}
<% } %>
<% } %>

<%= for (structure) in unique_structures(def) { %><%= comment(structure.Comment) %>
type <%= structure.Name %> struct {
    <%= for (field) in structure.Fields { %><%= comment(field.Comment) %>
    <%= field.Name %> <%= field.Type.Name %>
    <% } %>
}

<% } %>
