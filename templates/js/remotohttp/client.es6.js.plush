// Code generated by Remoto; DO NOT EDIT.

// Remoto JavaScript Client
//
// uses the Fetch API: to support older browsers, use the polyfil https://github.github.io/fetch/

'use strict';
<%= for (service) in def.Services { %>
// <%= service.Name %>ClientOptions are the options for the <%= service.Name %>Client.
export class <%= service.Name %>ClientOptions {
	constructor(data = {}) {
		this._data = data
		this._data.endpoint = this._data.endpoint || "http://localhost:8080"
	}
	get endpoint() { return this._data.endpoint }
	set endpoint(endpoint) { this._data.endpoint = endpoint }
}

<%= print_comment(service.Comment) %>export class <%= service.Name %>Client {
	constructor(options) {
		this.options = options
	}
	<%= for (method) in service.Methods { %>
	<%= print_comment(method.Comment) %><%= method.Name %>(<%= camelize_down_first(method.RequestType.Name) %> = null) {
		return this.<%= method.Name %>Multi([<%= camelize_down_first(method.RequestType.Name) %>]).then(function(responses) {
			return responses[0]
		})
	}

	// <%= method.Name %>Multi is the batch version of <%= method.Name %>.
	<%= method.Name %>Multi(<%= camelize_down_first(method.RequestType.Name) %>s) {
		var data = new FormData()
		<%= camelize_down_first(method.RequestType.Name) %>s.forEach(function(request){
			if (request && !request instanceof <%= method.RequestType.Name %>) {
				throw '<%= service.Name %>Client.<%= method.Name %>: requests must be instances of <%= method.RequestType.Name %>'
			}
			let allfiles = request.allFiles()
			allfiles.forEach(function(fieldname) {
				data.set(fieldname, allfiles[fieldname])
			})
		})
		data.set('json', JSON.stringify(<%= camelize_down_first(method.RequestType.Name) %>s))
		return fetch(this.options.endpoint() + '/remoto/<%= service.Name %>.<%= method.Name %>', {
			method: 'post', body: data,
			headers: {'Content-Type': 'multipart/form-data', 'Accept':'application/json'}
		}).then(function(responseData){ // success
			var responses = []
			responseData.json().forEach(function(response){
				responses.push(new <%= method.ResponseType.Name %>(response))
			})
			return responses
		}, function(error){ // error
			throw '<%= service.Name %>Client.<%= method.Name %>: ' + error.message
		})
	}
	<% } %>
}
<% } %>
<%= for (structure) in unique_structures(def) { %><%= print_comment(structure.Comment) %>export class <%= structure.Name %> {
	constructor(data = {}) {
		this._data = data
		this._files = {}
		this._filesCount = 0
	}
	<%= if (structure.IsRequestObject) { %>
	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.
	addFile(filename, file) {
		let fieldname = 'files['+(this._filesCount++)+']'
		this._files[fieldname] = file
		return fieldname
	}

	// allFiles gets a map of files in this request.
	get allFiles() { return this._files }
	// filesCount gets the number of files in this request.
	get filesCount() { return this._filesCount }
	<% } %>
	// toJSON gets a JSON string describing this object.
	toJSON() { return JSON.stringify(this._data) }
<%= for (field) in structure.Fields { %>
	get <%= camelize_down_first(field.Name) %>() { return this._data.<%= underscore(field.Name) %> }
	<%= if (field.Type.Name == "remototypes.File") { %>set<%= field.Name %>(request, filename, <%= underscore(field.Name) %>) { this._data.<%= underscore(field.Name) %> = request.addFile(filename, <%= underscore(field.Name) %>) }<% } %>
	<%= if (!structure.IsResponseObject && field.Type.Name != "remototypes.File") { %>set <%= camelize_down_first(field.Name) %>(<%= underscore(field.Name) %>) { this._data.<%= underscore(field.Name) %> = <%= underscore(field.Name) %> }<% } %><% } %>
}<% } %>
