// Code generated by Remoto; DO NOT EDIT.

// Package example contains the JSON/HTTP server for example services.
package example

import (
	"context"
	"encoding/json"
	"net/http"
	"io"
	"io/ioutil"
	"os"

	"github.com/matryer/remoto/go/remotohttpjson"
	"github.com/pkg/errors"
)

// Run is the simplest way to run the services.
func Run(addr string, 
	greetFormatter GreetFormatter,

	greeter Greeter,
) error {
	server := New(
		greetFormatter,
	
		greeter,
	)
	if err := server.Describe(os.Stdout, "endpoint:"); err != nil {
		return errors.Wrap(err, "describe service")
	}
	if err := http.ListenAndServe(addr, server); err != nil {
		return err
	}
	return nil
}

// New makes a new remotohttpjson.Server with the specified services
// registered.
func New(
	greetFormatter GreetFormatter,

	greeter Greeter,
) *remotohttpjson.Server {
	server := remotohttpjson.NewServer()
	RegisterGreetFormatterServer(server, greetFormatter)
	RegisterGreeterServer(server, greeter)
	return server
}

// GreetFormatRequest is the request for Greeter.GreetRequest.
type GreetFormatRequest struct {
	// 
	Format string `json:"format"`
	// 
	Name string `json:"name"`
	
}

// GreetResponse is the response for Greeter.GreetRequest.
type GreetResponse struct {
	// 
	Greeting string `json:"greeting"`
	// Error is an error message if one occurred.
	Error string `json:"error"`
	
}

// GreetRequest is the request for Greeter.GreetRequest.
type GreetRequest struct {
	// 
	Name string `json:"name"`
	
}



// GreetFormatter provides formattable greeting services.
type GreetFormatter interface {
	// 
	Greet(context.Context, *GreetFormatRequest) (*GreetResponse, error)

}

// RegisterGreetFormatterServer registers a GreetFormatter with a remotohttpjson.Server.
func RegisterGreetFormatterServer(server *remotohttpjson.Server, service GreetFormatter) {
	srv := &httpjsonGreetFormatterServer{service: service}
	
	server.Register("/remoto/GreetFormatter.Greet", srv.Greet)
	
}

type httpjsonGreetFormatterServer struct {
	service GreetFormatter
}


// Greet is a remotohttpjson.HandlerFunc wrapper for GreetFormatter.Greet.
func (srv *httpjsonGreetFormatterServer) Greet(ctx context.Context, w io.Writer, r io.Reader) error {
	var reqs []*GreetFormatRequest
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return errors.Wrap(err, "read request")
	}
	if err = json.Unmarshal(b, &reqs); err != nil {
		return errors.Wrap(err, "decode request")
	}
	resps := make([]GreetResponse, len(reqs))
	for i := range reqs {
		resp, err := srv.service.Greet(ctx, reqs[i])
		if err != nil {
			resps[i].Error = err.Error()
			continue
		}
		resps[i] = *resp
	}
	if b, err = json.Marshal(resps); err != nil {
		return errors.Wrap(err, "encode response")
	}
	if _, err = w.Write(b); err != nil {
		return errors.Wrap(err, "write response")
	}
	return nil
}
 

// Greeter provides greeting services.
type Greeter interface {
	// 
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)

}

// RegisterGreeterServer registers a Greeter with a remotohttpjson.Server.
func RegisterGreeterServer(server *remotohttpjson.Server, service Greeter) {
	srv := &httpjsonGreeterServer{service: service}
	
	server.Register("/remoto/Greeter.Greet", srv.Greet)
	
}

type httpjsonGreeterServer struct {
	service Greeter
}


// Greet is a remotohttpjson.HandlerFunc wrapper for Greeter.Greet.
func (srv *httpjsonGreeterServer) Greet(ctx context.Context, w io.Writer, r io.Reader) error {
	var reqs []*GreetRequest
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return errors.Wrap(err, "read request")
	}
	if err = json.Unmarshal(b, &reqs); err != nil {
		return errors.Wrap(err, "decode request")
	}
	resps := make([]GreetResponse, len(reqs))
	for i := range reqs {
		resp, err := srv.service.Greet(ctx, reqs[i])
		if err != nil {
			resps[i].Error = err.Error()
			continue
		}
		resps[i] = *resp
	}
	if b, err = json.Marshal(resps); err != nil {
		return errors.Wrap(err, "encode response")
	}
	if _, err = w.Write(b); err != nil {
		return errors.Wrap(err, "write response")
	}
	return nil
}
 

